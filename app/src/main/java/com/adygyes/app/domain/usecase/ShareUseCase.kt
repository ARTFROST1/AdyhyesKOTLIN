package com.adygyes.app.domain.usecase

import android.content.Context
import android.content.Intent
import com.adygyes.app.domain.model.Attraction
import dagger.hilt.android.qualifiers.ApplicationContext
import timber.log.Timber
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Use case for sharing attraction information
 */
@Singleton
class ShareUseCase @Inject constructor(
    @ApplicationContext private val context: Context
) {
    
    /**
     * Share attraction details with other apps
     */
    fun shareAttraction(attraction: Attraction) {
        try {
            val shareText = buildShareText(attraction)
            
            val shareIntent = Intent().apply {
                action = Intent.ACTION_SEND
                type = "text/plain"
                putExtra(Intent.EXTRA_TEXT, shareText)
                putExtra(Intent.EXTRA_SUBJECT, "–ü–æ—Å–µ—Ç–∏—Ç–µ ${attraction.name} –≤ –ê–¥—ã–≥–µ–µ!")
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }
            
            val chooserIntent = Intent.createChooser(shareIntent, "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–º").apply {
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }
            
            context.startActivity(chooserIntent)
            Timber.d("Shared attraction: ${attraction.name}")
        } catch (e: Exception) {
            Timber.e(e, "Failed to share attraction: ${attraction.name}")
        }
    }
    
    /**
     * Share attraction location (coordinates only)
     */
    fun shareAttractionLocation(attraction: Attraction) {
        try {
            val locationText = buildLocationShareText(attraction)
            
            val shareIntent = Intent().apply {
                action = Intent.ACTION_SEND
                type = "text/plain"
                putExtra(Intent.EXTRA_TEXT, locationText)
                putExtra(Intent.EXTRA_SUBJECT, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${attraction.name}")
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }
            
            val chooserIntent = Intent.createChooser(shareIntent, "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º").apply {
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }
            
            context.startActivity(chooserIntent)
            Timber.d("Shared location for: ${attraction.name}")
        } catch (e: Exception) {
            Timber.e(e, "Failed to share location for: ${attraction.name}")
        }
    }
    
    /**
     * Share multiple attractions (for collections or favorites)
     */
    fun shareAttractionCollection(attractions: List<Attraction>, collectionName: String = "–ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞") {
        try {
            val shareText = buildCollectionShareText(attractions, collectionName)
            
            val shareIntent = Intent().apply {
                action = Intent.ACTION_SEND
                type = "text/plain"
                putExtra(Intent.EXTRA_TEXT, shareText)
                putExtra(Intent.EXTRA_SUBJECT, collectionName)
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }
            
            val chooserIntent = Intent.createChooser(shareIntent, "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π").apply {
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }
            
            context.startActivity(chooserIntent)
            Timber.d("Shared collection: $collectionName with ${attractions.size} attractions")
        } catch (e: Exception) {
            Timber.e(e, "Failed to share collection: $collectionName")
        }
    }
    
    /**
     * Build formatted text for sharing a single attraction
     */
    private fun buildShareText(attraction: Attraction): String {
        return buildString {
            appendLine("üèûÔ∏è ${attraction.name}")
            appendLine()
            appendLine("üìç ${attraction.category.displayName}")
            appendLine()
            appendLine("üìù ${attraction.description}")
            appendLine()
            
            attraction.location.address?.let { address ->
                appendLine("üìç –ê–¥—Ä–µ—Å: $address")
            }
            
            attraction.rating?.let { rating ->
                appendLine("‚≠ê –†–µ–π—Ç–∏–Ω–≥: $rating/5")
            }
            
            attraction.workingHours?.let { hours ->
                appendLine("üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $hours")
            }
            
            attraction.priceInfo?.let { price ->
                appendLine("üí∞ –¶–µ–Ω–∞: $price")
            }
            
            if (attraction.tags.isNotEmpty()) {
                appendLine("üè∑Ô∏è –¢–µ–≥–∏: ${attraction.tags.joinToString(", ")}")
            }
            
            appendLine()
            appendLine("üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${attraction.location.latitude}, ${attraction.location.longitude}")
            appendLine("üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö:")
            append("https://yandex.ru/maps/?ll=${attraction.location.longitude},${attraction.location.latitude}&z=16&text=${attraction.name}")
            appendLine()
            appendLine()
            appendLine("–ù–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Adygyes - –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ –ê–¥—ã–≥–µ–µ")
        }
    }
    
    /**
     * Build formatted text for sharing location only
     */
    private fun buildLocationShareText(attraction: Attraction): String {
        return buildString {
            appendLine("üìç ${attraction.name}")
            appendLine()
            attraction.location.address?.let { address ->
                appendLine("–ê–¥—Ä–µ—Å: $address")
            }
            appendLine("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${attraction.location.latitude}, ${attraction.location.longitude}")
            appendLine()
            appendLine("üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö:")
            append("https://yandex.ru/maps/?ll=${attraction.location.longitude},${attraction.location.latitude}&z=16&text=${attraction.name}")
        }
    }
    
    /**
     * Build formatted text for sharing a collection of attractions
     */
    private fun buildCollectionShareText(attractions: List<Attraction>, collectionName: String): String {
        return buildString {
            appendLine("üèûÔ∏è $collectionName")
            appendLine("üìç ${attractions.size} –º–µ—Å—Ç –≤ –ê–¥—ã–≥–µ–µ")
            appendLine()
            
            attractions.forEachIndexed { index, attraction ->
                appendLine("${index + 1}. ${attraction.name}")
                appendLine("   üìç ${attraction.category.displayName}")
                attraction.rating?.let { rating ->
                    appendLine("   ‚≠ê $rating/5")
                }
                attraction.location.address?.let { address ->
                    appendLine("   üìç $address")
                }
                appendLine()
            }
            
            appendLine("–ù–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Adygyes - –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ –ê–¥—ã–≥–µ–µ")
        }
    }
}
