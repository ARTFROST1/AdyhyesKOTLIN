package com.adygyes.app.domain.model

import java.util.UUID

/**
 * Domain model representing geographic objects like parks, protected areas, etc.
 */
data class GeoObject(
    val id: String = UUID.randomUUID().toString(),
    val name: String,
    val description: String,
    val type: GeoObjectType,
    val polygon: List<Location>,
    val fillColor: String,
    val strokeColor: String,
    val strokeWidth: Float = 2.0f,
    val opacity: Float = 0.3f,
    val isVisible: Boolean = true,
    val tags: List<String> = emptyList(),
    val metadata: Map<String, String> = emptyMap()
)

/**
 * Domain model representing tourist trails and routes
 */
data class TouristTrail(
    val id: String = UUID.randomUUID().toString(),
    val name: String,
    val description: String,
    val difficulty: TrailDifficulty,
    val polyline: List<Location>,
    val color: String,
    val width: Float = 3.0f,
    val length: Float, // in kilometers
    val duration: String, // estimated time
    val isVisible: Boolean = true,
    val waypoints: List<Waypoint> = emptyList(),
    val tags: List<String> = emptyList()
)

/**
 * Waypoint along a tourist trail
 */
data class Waypoint(
    val id: String = UUID.randomUUID().toString(),
    val name: String,
    val description: String? = null,
    val location: Location,
    val type: WaypointType,
    val icon: String? = null
)

/**
 * Types of geographic objects
 */
enum class GeoObjectType(val displayName: String, val defaultColor: String) {
    NATIONAL_PARK("–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫", "#4CAF50"),
    NATURE_RESERVE("–ó–∞–ø–æ–≤–µ–¥–Ω–∏–∫", "#2E7D32"),
    PROTECTED_AREA("–û—Ö—Ä–∞–Ω—è–µ–º–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è", "#66BB6A"),
    FOREST("–õ–µ—Å", "#388E3C"),
    WATER_BODY("–í–æ–¥–æ–µ–º", "#03A9F4"),
    MOUNTAIN_RANGE("–ì–æ—Ä–Ω—ã–π —Ö—Ä–µ–±–µ—Ç", "#795548"),
    RECREATIONAL_ZONE("–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞", "#FF9800"),
    CULTURAL_SITE("–ö—É–ª—å—Ç—É—Ä–Ω—ã–π –æ–±—ä–µ–∫—Ç", "#9C27B0")
}

/**
 * Trail difficulty levels
 */
enum class TrailDifficulty(val displayName: String, val color: String) {
    EASY("–õ–µ–≥–∫–∏–π", "#4CAF50"),
    MODERATE("–°—Ä–µ–¥–Ω–∏–π", "#FF9800"),
    HARD("–°–ª–æ–∂–Ω—ã–π", "#F44336"),
    EXTREME("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π", "#9C27B0")
}

/**
 * Types of waypoints along trails
 */
enum class WaypointType(val displayName: String, val icon: String) {
    START("–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞", "üö©"),
    FINISH("–ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞", "üèÅ"),
    VIEWPOINT("–°–º–æ—Ç—Ä–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞", "üëÅÔ∏è"),
    REST_AREA("–ú–µ—Å—Ç–æ –æ—Ç–¥—ã—Ö–∞", "üèïÔ∏è"),
    WATER_SOURCE("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–æ–¥—ã", "üíß"),
    DANGER("–û–ø–∞—Å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫", "‚ö†Ô∏è"),
    PHOTO_SPOT("–ú–µ—Å—Ç–æ –¥–ª—è —Ñ–æ—Ç–æ", "üì∏"),
    LANDMARK("–û—Ä–∏–µ–Ω—Ç–∏—Ä", "üìç")
}

/**
 * Extension functions for geo-objects
 */
fun GeoObject.getBounds(): Pair<Location, Location> {
    if (polygon.isEmpty()) return Pair(Location(0.0, 0.0), Location(0.0, 0.0))
    
    val minLat = polygon.minOf { it.latitude }
    val maxLat = polygon.maxOf { it.latitude }
    val minLon = polygon.minOf { it.longitude }
    val maxLon = polygon.maxOf { it.longitude }
    
    return Pair(
        Location(minLat, minLon),
        Location(maxLat, maxLon)
    )
}

fun TouristTrail.getBounds(): Pair<Location, Location> {
    if (polyline.isEmpty()) return Pair(Location(0.0, 0.0), Location(0.0, 0.0))
    
    val minLat = polyline.minOf { it.latitude }
    val maxLat = polyline.maxOf { it.latitude }
    val minLon = polyline.minOf { it.longitude }
    val maxLon = polyline.maxOf { it.longitude }
    
    return Pair(
        Location(minLat, minLon),
        Location(maxLat, maxLon)
    )
}
