package com.adygyes.app.presentation.ui.map.markers

import android.content.Context
import android.graphics.*
import androidx.core.content.ContextCompat
import com.adygyes.app.R
import com.yandex.mapkit.geometry.Point
import com.yandex.mapkit.map.*
import com.yandex.mapkit.mapview.MapView
import com.yandex.runtime.image.ImageProvider
import timber.log.Timber

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–π –º–∞—Ä–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–µ—Ä–≥–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã
 */
class UserLocationMarkerProvider(
    private val mapView: MapView,
    private val context: Context
) {
    private val mapObjectCollection = mapView.map.mapObjects
    private var userLocationMarker: PlacemarkMapObject? = null
    private var currentLocation: Pair<Double, Double>? = null
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä–∫–µ—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    fun showUserLocationMarker(location: Pair<Double, Double>) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –º–∞—Ä–∫–µ—Ä
            if (currentLocation == location && userLocationMarker != null) {
                return // –ú–∞—Ä–∫–µ—Ä —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
            }
            
            currentLocation = location
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            userLocationMarker?.let { marker ->
                mapObjectCollection.remove(marker)
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
            val point = Point(location.first, location.second)
            val imageProvider = createUserLocationIcon()
            
            userLocationMarker = mapObjectCollection.addPlacemark(point, imageProvider).apply {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º z-index –≤—ã—à–µ –æ–±—ã—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
                zIndex = 1000f
                // –û—Ç–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞
                userData = "user_location"
            }
            
            Timber.d("‚úÖ User location marker created at: ${location.first}, ${location.second}")
            
        } catch (e: Exception) {
            Timber.e(e, "‚ùå Failed to create user location marker")
        }
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    fun hideUserLocationMarker() {
        userLocationMarker?.let { marker ->
            mapObjectCollection.remove(marker)
            userLocationMarker = null
            currentLocation = null
            Timber.d("üö´ User location marker removed")
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private fun createUserLocationIcon(): ImageProvider {
        val size = 56 // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ –≤ dp
        val density = context.resources.displayMetrics.density
        val sizePixels = (size * density).toInt()
        
        // –°–æ–∑–¥–∞–µ–º bitmap –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
        val bitmap = Bitmap.createBitmap(sizePixels, sizePixels, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        
        // –¶–≤–µ—Ç–∞ - –∑–µ–ª–µ–Ω—ã–π –º–∞—Ä–∫–µ—Ä –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        val primaryColor = Color.parseColor("#4CAF50") // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        val whiteColor = Color.WHITE
        
        // –†–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥ —Å —Ç–µ–Ω—å—é
        val paint = Paint().apply {
            isAntiAlias = true
            style = Paint.Style.FILL
            color = primaryColor
            setShadowLayer(8f * density, 0f, 2f * density, Color.argb(80, 0, 0, 0))
        }
        
        val centerX = sizePixels / 2f
        val centerY = sizePixels / 2f
        val radius = sizePixels / 2f - 4f * density
        
        canvas.drawCircle(centerX, centerY, radius, paint)
        
        // –†–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–µ–ª–∞—è)
        val iconPaint = Paint().apply {
            isAntiAlias = true
            color = whiteColor
            style = Paint.Style.FILL
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try {
            val drawable = ContextCompat.getDrawable(context, R.drawable.ic_launcher_foreground)
            if (drawable != null) {
                // –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–¥–∏—É—Å
                val iconSize = (radius * 1.2f).toInt()
                val iconLeft = (centerX - iconSize / 2).toInt()
                val iconTop = (centerY - iconSize / 2).toInt()
                
                drawable.setBounds(iconLeft, iconTop, iconLeft + iconSize, iconTop + iconSize)
                drawable.setTint(whiteColor)
                drawable.draw(canvas)
            } else {
                // Fallback: —Ä–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–æ—á–∫—É
                val dotRadius = 8f * density
                canvas.drawCircle(centerX, centerY, dotRadius, iconPaint)
            }
        } catch (e: Exception) {
            // Fallback: —Ä–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–æ—á–∫—É
            val dotRadius = 6f * density
            canvas.drawCircle(centerX, centerY, dotRadius, iconPaint)
            Timber.w(e, "Failed to load app icon for user location marker")
        }
        
        return ImageProvider.fromBitmap(bitmap)
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    fun cleanup() {
        hideUserLocationMarker()
    }
}
